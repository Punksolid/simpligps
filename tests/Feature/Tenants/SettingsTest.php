<?php

namespace Tests\Feature;

use App\Account;
use App\Http\Middleware\LimitExpiredLicenseAccess;
use App\Http\Middleware\LimitSimoultaneousAccess;
use App\Setting;
use App\User;
use Tests\Tenants\TestCase;

class SettingsTest extends TestCase
{

    var $user;


    protected function setUp():void
{
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();
        $this->actingAs($this->user,"api");
        $this->withoutMiddleware([LimitSimoultaneousAccess::class, LimitExpiredLicenseAccess::class]);

        $account = factory(Account::class)->create();
        $account->addUser($this->user);

    }
    public function test_guardar_wialon_api_key()
    {
        $key = '5dce19710a5e26ab8b7b8986cb3c49e58C291791B7F0A7AEB8AFBFCEED7DC03BC48FF5F8';

        $call = $this->actingAs($this->user)->postJson('api/v1/settings', [
            "wialon_key" => $key,
            "import" => false
        ] );

        $call->assertJson([
            "data" => [
                "wialon_key" => $key
            ]
        ]);
        $call->assertSuccessful();
    }

    public function test_obtener_settings()
    {
        $this->test_guardar_wialon_api_key();
        $call = $this->actingAs($this->user)->getJson('api/v1/settings');

        $call->assertJsonFragment([
            'wialon_key' => '5dce19710a5e26ab8b7b8986cb3c49e58C291791B7F0A7AEB8AFBFCEED7DC03BC48FF5F8'
        ]);
        $call->assertSuccessful();

    }

    public function test_save_traccar_settings()
    {
        $call = $this->putJson('api/v1/settings', [
            'traccar_base_url'=> "http://localhost:8082/",
            'traccar_username'=> "admin",
            'traccar_password'=> "admin"
        ]);

        $call->assertJsonFragment(['traccar_base_url' => "http://localhost:8082/"]);
        $call->assertJsonFragment(['traccar_username' => "admin"]);
        $call->assertJsonFragment(['traccar_password' => "admin"]);
    }

    public function test_update_only_traccar_username(): void
    {
        $old_url = $this->faker->url;
        $settings = Setting::updateOrCreate([
            'key' => 'traccar_base_url'
        ], [
            'value' => $old_url,
            'description' => ""
        ]);

        $url = $this->faker->url;
        $call = $this->putJson('api/v1/settings', [
            'traccar_base_url'=> $url,
        ]);

        $call->assertJsonFragment(['traccar_base_url' => $url]);
        $call->assertJsonMissing(['traccar_base_url' => $old_url]);
    }
}
