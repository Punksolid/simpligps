<?php

namespace Tests\Feature;

use App\Carrier;
use App\Device;
use App\Http\Middleware\LimitExpiredLicenseAccess;
use App\Http\Middleware\LimitSimoultaneousAccess;
use App\User;
use Punksolid\Wialon\Unit;
use Tests\Tenants\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class DevicesTest extends TestCase
{
    var $user;

    public function deviceForm(): array
    {
        return  [
            "name" => $this->faker->name. $this->faker->unique()->randomNumber(5),
            "internal_number" => $this->faker->randomNumber(6).$this->faker->unique()->randomNumber(4),
            "gps" => $this->faker->company,
            "carrier_id" => factory(Carrier::class)->create()->id,
            "plate" => $this->faker->randomNumber(7)
        ];
    }

    protected function setUp():void
{
//        $this->withoutExceptionHandling(); //fails

        parent::setUp(); // TODO: Change the autogenerated stub
        $event = User::getEventDispatcher();
        User::unsetEventDispatcher();
        $this->user = factory(User::class)->create();
        User::setEventDispatcher($event);
        $this->actingAs($this->user, "api");
        $this->withoutMiddleware([LimitSimoultaneousAccess::class, LimitExpiredLicenseAccess::class]);
        config([
            "services.wialon.token" => "5dce19710a5e26ab8b7b8986cb3c49e58C291791B7F0A7AEB8AFBFCEED7DC03BC48FF5F8"
        ]);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_registrar_un_nuevo_dispositivo()
    {
        $this->markTestSkipped("No se puede probar con el token de wialon playground");
        $device = $this->deviceForm();

        $call = $this->postJson("api/v1/devices", $device);

        $call->assertJsonFragment($device);

        return $call->getOriginalContent();
    }

    public function test_usuario_puede_ver_detalles_de_un_solo_dispositivo()
    {
        $device = factory(Device::class)->create();
        $call = $this->getJson("api/v1/devices/$device->id");

        $call->assertJson([
            "data" => [
                "internal_number" => $device->internal_number,
                "gps" => $device->gps,
                "carrier_id" => $device->carrier_id,
                "plate" => $device->plate,

            ]
        ]);
        $call->assertJsonStructure([
            "data" => [
                "internal_number",
                "gps",
                "carrier_id",
                "plate",
                "name",
                "reference_data"
            ]
        ]);

    }

    public function test_listar_dispositivos_paginados()
    {
        $this->withoutExceptionHandling();
        $call = $this->getJson("api/v1/devices");
        $call->assertJsonStructure([
            "data" => [
                "*" => [
                    "internal_number",
                    "gps",
                    "carrier_id",
                    "plate"
                ]
            ]
        ]);
        $call->assertStatus(200);
    }

    public function test_editar_registro_de_dispositivo()
    {
        $device = $this->test_registrar_un_nuevo_dispositivo();
        $new_device = $this->deviceForm();
        $call = $this->putJson("api/v1/devices/$device->id", $new_device);
        $call->assertJsonFragment($new_device);
        $call->assertStatus(200);
    }

    public function test_destruir_dispositivo()
    {
        $this->withoutExceptionHandling();
        $device = factory(Device::class)->create();
        $call = $this->deleteJson("api/v1/devices/$device->id");

        $this->assertSoftDeleted("devices", [
            "name" => $device->name
        ],'tenant');
        $call->assertStatus(200);

    }

    public function test_actualizar_ubicacion_dispositivo_desde_llamada_externa()
    {
        $device = factory(Device::class)->create();
        $call = $this->postJson("api/v1/external/devices/{$device->id}/localization", [
            "lat" => $this->faker->latitude,
            "lon" => $this->faker->longitude
        ]);
        $call->assertSuccessful();
    }

    public function test_registro_api_externo_de_unidades()
    {
        $device = $this->deviceForm();
        $call = $this->postJson("api/v1/external/devices", $device);
        $call->assertJsonFragment($device);
        $call->assertSuccessful();
    }

    public function test_api_acceso_externo_para_la_recoleccion_de_unidades()
    {
        $call = $this->getJson("api/v1/external/devices");

        $call->assertJsonStructure([
            "data" => [
                "*" => [
                    "internal_number",
                    "gps",
                    "carrier_id",
                    "plate"
                ]
            ]
        ]);
        $call->assertStatus(200);
    }

    public function test_ligar_unidad_wialon_a_device()
    {

        $unit = Unit::all()->first();
        $device = $this->test_registrar_un_nuevo_dispositivo();

        $call = $this->postJson("api/v1/devices/{$device->id}/link_unit",[
           "unit_id" => $unit->id
        ]);

        $call->assertJsonStructure([
            "data" => [
                "name",
                "reference_data" => [
                    "id",
                    "nm"
                ]
            ]
        ]);

        $call->assertJsonFragment([
            "nm" => $unit->nm
        ]);

    }

}
