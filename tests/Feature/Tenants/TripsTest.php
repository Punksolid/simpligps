<?php

namespace Tests\Feature;

use App\Carrier;
use App\Client;
use App\Device;
use App\Http\Middleware\LimitExpiredLicenseAccess;
use App\Http\Middleware\LimitSimoultaneousAccess;
use App\Operator;
use App\Place;
use App\TrailerBox;
use App\Trip;
use App\TruckTract;
use App\User;
use Carbon\Carbon;
use Illuminate\Http\UploadedFile;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\Tenants\TestCase;

class TripsTest extends TestCase
{
    var $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();
        $this->actingAs($this->user, "api");
        $this->withoutMiddleware([LimitSimoultaneousAccess::class, LimitExpiredLicenseAccess::class]);
    }

    public function test_ver_listado_de_viajes()
    {
        $call = $this->getJson("api/v1/trips");

        $call->assertJsonStructure([
            "data" => [
                "*" => [
                    "id",
                    "rp",
                    "invoice",
                    "origin_name",
                    "destination_name",
                    "client_name",
                    "truck_name",
                    "scheduled_load",
                    "scheduled_departure",
                    "scheduled_arrival",
                    "real_departure",
                    "real_arrival"
                ]
            ]
        ]);
    }

    public function test_crear_nuevo_viaje_manual()
    {

        $mochis = factory(Place::class)->create();
        $trip = [
            "rp" => $this->faker->name,
            "invoice" => $this->faker->randomNumber(5),
            "client_id" => factory(Client::class)->create()->id,
            "device_id" => factory(Device::class)->create()->id,
            "intermediates" => [
                [
                    "place_id" => $mochis->id,
                    "at_time" => Carbon::now()->addDay(1)->toDateTimeString(),
                    "exiting" => Carbon::now()->addDay(2)->toDateTimeString()
                ],[
                    "place_id" => factory(Place::class)->create()->id,
                    "at_time" => Carbon::now()->addDays(2)->toDateTimeString(),
                    "exiting" => Carbon::now()->addDays(3)->toDateTimeString()
                ]
            ],
            "trailers_ids" => [
                factory(TrailerBox::class)->create()->id,
                factory(TrailerBox::class)->create()->id,
            ],
            "origin_id" => factory(Place::class)->create()->id,
            "destination_id" => factory(Place::class)->create()->id,
            "georoute_ref" => $this->faker->shuffleString('alskdjflaskj'),

            "mon_type" => $this->faker->randomNumber(1), // tipo de monitoreo es una relacion
            "carrier_id" => factory(Carrier::class)->create()->id,
            "truck_tract_id" => factory(TruckTract::class)->create()->id,
            "operator_id" => factory(Operator::class)->create()->id,

            "scheduled_load" => Carbon::now()->toDateString(),
            "scheduled_departure" => Carbon::now()->addDays(1)->toDateString(),
            "scheduled_arrival" => Carbon::now()->addDays(2)->toDateString(),
            "scheduled_unload" => Carbon::now()->addDays(3)->toDateString()

        ];



        $this->withoutExceptionHandling();
        $call = $this->postJson("/api/v1/trips", $trip);
        $call->assertSuccessful();

        $call->assertJsonFragment([
            'truck_tract_id' => $trip['truck_tract_id'],
            'operator_id' => $trip['operator_id'],
            'client_id' => $trip['client_id']
        ], 'asignar tracto a viaje');



        $call->assertJsonStructure([
            'data' => [
                'device_id',
                'rp',
                'invoice',
                'client_id',
                'origin_id',
                'destination_id',
                'georoute_ref',
                'mon_type',
                'carrier_id',
                'truck_tract_id',
                'operator_id',

                "scheduled_load",
                "scheduled_departure",
                "scheduled_arrival",
                "scheduled_unload",

                "intermediates" => [
                    '*' => [
                        'id',
                        'name',
                        'at_time',
                        'exiting'
                    ]
                ]
            ]
        ]);
        $call->assertJsonFragment([
            'name' => $mochis->name
        ]);
    }

    public function test_ver_detalles_de_un_viaje()
    {
        $this->withoutExceptionHandling();
        $trip = factory(Trip::class)->create([
            'origin_id' => factory(Place::class)->create()->id,
            'destination_id' => factory(Place::class)->create()->id,
            'device_id' => factory(Device::class)->create()->id,
            'truck_tract_id' => factory(TruckTract::class)->create()->id,
            'operator_id' => factory(Operator::class)->create()->id,
            'client_id' => factory(Client::class)->create()->id
        ]);
        
        $call = $this->getJson("api/v1/trips/{$trip->id}");
        
        $call->assertSuccessful();
        $call->assertJsonStructure([
            "data" => [
                'id',
                'rp',
                'invoice',
                'client_id',
                'origin_id',
                'destination_id',

                'mon_type',
                'carrier_id',

                "scheduled_load",
                "scheduled_departure",
                "scheduled_arrival",
                "scheduled_unload",
                "origin" => [
                    "id",
                    "name"
                ],
                "destination" => [
                    "id",
                    "name"
                ],
                "intermediates" => [
                    '*' => [
                        'id',
                        'name',
                        'at_time',
                        'exiting'
                    ]
                ],
                "device" => [
                    'id'
                ],
                'truck',
                'operator'

            ]
        ]);
    }

    public function test_editar_viaje()
    {
        $trip_arr = factory(Trip::class)->create()->toArray();

        $trip_modified = [
            "rp" => $this->faker->name,
            "invoice" => $this->faker->randomNumber(5),
            "client_id" => factory(Client::class)->create()->id,
            "intermediates" => [
                [
                    "place_id" => factory(Place::class)->create()->id,
                    "at_time" => Carbon::now()->addDay(1)->toDateTimeString(),
                    "exiting" => Carbon::now()->addDay(1)->toDateTimeString()
                ],[
                    "place_id" => factory(Place::class)->create()->id,
                    "at_time" => Carbon::now()->addDays(2)->toDateTimeString(),
                    "exiting" => Carbon::now()->addDays(2)->toDateTimeString()
                ]
            ],
            "origin_id" => factory(Place::class)->create()->id,
            "destination_id" => factory(Place::class)->create()->id,
            "mon_type" => $this->faker->randomNumber(1),
            "carrier_id" => factory(Carrier::class)->create()->id,
            "truck_tract_id" => factory(TruckTract::class)->create()->id,
            "operator_id" => factory(Operator::class)->create()->id,
            "trailers_ids" => [
                factory(TrailerBox::class)->create()->id
            ],
            "scheduled_load" => Carbon::now()->toDateTimeString(),
            "scheduled_departure" => Carbon::now()->addDays(1)->toDateTimeString(),
            "scheduled_arrival" => Carbon::now()->addDays(2)->toDateTimeString(),
            "scheduled_unload" => Carbon::now()->addDays(3)->toDateTimeString()

        ];

        $call = $this->putJson("/api/v1/trips/" . $trip_arr["id"], $trip_modified);

        $call->assertJson([
            'data' => [
                "rp" => $trip_modified['rp'],
                "truck_tract_id" => $trip_modified['truck_tract_id'], // puede modificar tracto
                "operator_id" => $trip_modified['operator_id'], // puede modificar operador
            ]
        ]);
        $call->assertJsonFragment([
             "id" => $trip_modified['trailers_ids'][0]
        ]);

        $call->assertStatus(200);

        return $call->getOriginalContent();
    }

    public function test_usuario_elimina_viaje()
    {

        $trip_arr = factory(Trip::class)->create();

        $call = $this->deleteJson("/api/v1/trips/" . $trip_arr["id"]);
        $call->assertJson([
            "message" => "eliminado"
        ]);
        $this->assertDatabaseMissing("trips", [
            "client_id" => $trip_arr["client_id"]
        ], "tenant");
        $call->assertStatus(200);
    }

    public function test_crear_importacion_de_plan_de_viaje()
    {
        $user = factory(User::class)->create();
        $trip = [
            "rp" => $this->faker->name,
            "invoice" => $this->faker->randomNumber(5),
            "client_id" => factory(Client::class)->create()->id,
            "intermediary" => $this->faker->company,
            "origin" => $this->faker->address,
            "destination" => $this->faker->address,
            "mon_type" => $this->faker->randomNumber(1),
            "carrier_id" => $this->faker->company,

            "scheduled_load" => Carbon::now()->toDateTimeString(),
            "scheduled_departure" => Carbon::now()->addDays(1)->toDateTimeString(),
            "scheduled_arrival" => Carbon::now()->addDays(2)->toDateTimeString(),
            "scheduled_unload" => Carbon::now()->addDays(3)->toDateTimeString()

        ];
        $path = "/home/ps/Descargas/formatos de carga de viajes/";
        $name = "viajes(sin opciones).xlsx";
        $file = new UploadedFile($path . $name, $name);


        $call = $this->actingAs($user)->call(
            "POST",
            "/api/v1/trips/upload",
            [],
            [],
            ['viajes' => $file],
            ['Accept' => 'application/json']
        );

        $call->assertJson($trip);
    }

    public function test_ver_viajes_activos()
    {

        $trip = factory(Trip::class)->create();
        $trip->attachTag("active");
        $call = $this
            ->actingAs(factory(User::class)->create())
            ->getJson("api/v1/trips?filter=active");


        $call->assertJsonFragment([
            "id" => $trip->id,
            "rp" => $trip->rp
        ]);

        $call->assertStatus(200);
    }

    public function test_ver_planes_de_viaje_por_etiqueta()
    {
        $user = factory(User::class)->create();
        $trip = factory(Trip::class)->create(["tag" => "riesgo"]);

        $call = $this->actingAs($user)->json("POST", "/api/v1/trips/filtered_with_tags", [
            "tag" => "riesgo"
        ]);

        $call->assertSee($trip->rp);
    }

    public function test_ver_asignar_etiqueta_a_viaje()
    {
        $trip = factory(Trip::class)->create();

        $etiqueta = $this->faker->word;
        $call = $this->postJson( "/api/v1/trips/{$trip->id}/tags", [
            "tags" => [
                $etiqueta
            ]
        ]);
        
        $call->assertSee($etiqueta);
        $call->assertStatus(200);
    }

    public function test_puede_sincronizar_etiquetas()
    {
        $trip = factory(Trip::class)->create([
            'tags' => [
                'hello'
            ]
        ]);

        $call = $this->postJson( "/api/v1/trips/{$trip->id}/tags", [
            "tags" => []
        ]);
        $call->assertSuccessful();
        $this->assertEquals(0,$trip->fresh()->tags->count());

    }


}
