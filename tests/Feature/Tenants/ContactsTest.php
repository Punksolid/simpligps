<?php

namespace Tests\Feature;

use App\Contact;
use App\Http\Middleware\LimitExpiredLicenseAccess;
use App\Http\Middleware\LimitSimoultaneousAccess;
use App\User;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\Tenants\TestCase;

class ContactsTest extends TestCase
{
    var $user;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();
        $this->actingAs($this->user, "api");
        $this->withoutMiddleware([LimitSimoultaneousAccess::class, LimitExpiredLicenseAccess::class]);

    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_registrar_un_nuevo_contacto()
    {
        $contact = [
            "name" => $this->faker->name,
            "company" => $this->faker->company,
            "phone" => $this->faker->phoneNumber,
            "email" => $this->faker->email,
            "address" => $this->faker->address
        ];

        $call = $this->postJson("api/v1/contacts", $contact);

        $call->assertJsonFragment($contact);
        $call->assertStatus(201);

        return $call->getOriginalContent();
    }

    public function test_usuario_puede_ver_detalles_de_un_solo_contacto()
    {
        $contact = factory(Contact::class)->create();

        $call = $this->getJson("api/v1/contacts/{$contact->id}");

        $call->assertJson([
            "data" => [
                "name" => $contact->name,
                "company" => $contact->company,
                "phone" => $contact->phone,
                "email" => $contact->email,
                "address" => $contact->address,

            ]
        ]);

    }

    public function test_listar_contactos_paginados()
    {
        $call = $this->json("GET", "api/v1/contacts");
        $call->assertJsonStructure([
            "data" => [
                "*" => [
                    "name",
                    "company",
                    "phone",
                    "address"
                ]
            ]
        ]);
        $call->assertStatus(200);
    }

    public function test_editar_registro_de_contacto()
    {
        $contact = factory(Contact::class)->create();
        $new_contact = [
            "name" => $this->faker->randomNumber(6),
            "company" => $this->faker->company,
            "phone" => $this->faker->phoneNumber,
            "address" => $this->faker->randomNumber(7)
        ];

        $call = $this->putJson("api/v1/contacts/{$contact->id}", $new_contact);

        $call->assertStatus(200);
        $call->assertJsonFragment($new_contact);
    }

    public function test_borrar_contacto()
    {
        $contact = factory(Contact::class)->create();

        $call = $this->actingAs(factory(User::class)->create())
            ->deleteJson("api/v1/contacts/{$contact->id}");


        $this->assertDatabaseMissing("contacts", [
            "name" => $contact->name
        ],'tenant');
        $call->assertStatus(200);

    }

    public function test_agregar_etiqueta_a_contacto()
    {
        $this->withoutExceptionHandling();
        $contact = factory(Contact::class)->create();
        $call = $this->actingAs(factory(User::class)->create())->postJson("api/v1/contacts/{$contact->id}/tags", [
            "tags" => [
                "autoridad",
                "federal"
            ]
        ]);

        $call->assertStatus(200);

        return $call->getOriginalContent();
    }

    public function test_filtrar_por_etiqueta()
    {
        $contact = factory(Contact::class)->create();
        $contact->attachTags(["autoridad", "federal"]);

        $call = $this->getJson( "api/v1/contacts/filter_tags", [
            "tags" => [
                "autoridad",
                "federal"
            ]
        ]);
        $call->assertJsonFragment([
            "name" => $contact->name,
            "company" => $contact->company
        ]);
        $call->assertStatus(200);
    }

    public function test_muestra_listado_vacio() {
        $this->withoutExceptionHandling();

        $call = $this->actingAs($this->user)
            ->getJson('api/v1/contacts');

        $call->assertSuccessful();
    }

    public function test_llamar_detalles_de_un_solo_contacto()
    {
        $this->withoutExceptionHandling();
        $contact = factory(Contact::class)->create();
        $call = $this->actingAs($this->user)
            ->getJson("api/v1/contacts/$contact->id");

        $call->assertSuccessful();
    }
}
