<?php

namespace Tests\Feature;

use App\Account;
use App\Http\Middleware\IdentifyTenantConnection;
use App\Http\Middleware\IsUserPermittedInAccountMiddleware;
use App\Http\Middleware\LimitExpiredLicenseAccess;
use App\Http\Middleware\LimitSimoultaneousAccess;
use App\License;
use App\User;
use Carbon\Carbon;
use Spatie\Activitylog\Models\Activity;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Tests\Tenants\TestCase;

class LoginInTenantTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->withHeader("X-Tenant-Id", $this->account->uuid);
    }


    public function test_cuenta_no_puede_tener_mas_de_2_sesiones_activas()
    {
        $this->markTestIncomplete('TODO! BAJA PRIORIDAD');
        $this->expectException(HttpException::class);
        $this->withoutExceptionHandling();
        $this->withMiddleware(LimitSimoultaneousAccess::class);
        $user1 = factory(User::class)->create(["name" => "pedro"]);
        $user2 = factory(User::class)->create(["name" => "juan"]);
        $user3 = factory(User::class)->create(["name" => "luis"]);


        $account = factory(Account::class)->create();
        $account->addLicense(factory(License::class)->create([
            "number_active_sessions" => 2
        ]));

        $account->addUser($user1);
        $account->addUser($user2);
        $account->addUser($user3);
        $call1 = $this->actingAs($user1, "api")->getJson("api/v1/devices");
        
        $call2 = $this->actingAs($user2, "api")->getJson("api/v1/devices");
        
        $call3 = $this->actingAs($user3, "api")->getJson("api/v1/devices");
        
        $call1->assertSuccessful();
        $call2->assertSuccessful();
    }

    public function test_denegar_acceso_sin_licencia_activa()
    {
        $this->expectException(HttpException::class);
        $this->withMiddleware([
            IdentifyTenantConnection::class,
            IsUserPermittedInAccountMiddleware::class,
            LimitExpiredLicenseAccess::class
        ]);

        $this->withoutExceptionHandling();

        $license = factory(License::class)->create();
        $account = factory(Account::class)->create();
        $account->addLicense($license, ["expires_at" => Carbon::yesterday()->toDateTimeString()]);
        $this->user->attachAccount($account);

        $call = $this->setAccount($account)->getJson("api/v1/devices");
        $call->assertStatus(403); // code for logged but not authorized
        \Cache::flush();
    }

    public function test_usuario_selecciona_una_cuenta()
    {

        $this->account->addUser($this->user);

        $call = $this->getJson("api/v1/account/access_logs", [
            "X-Tenant-Id" => $this->account->uuid
        ]);
        $call->assertSuccessful();
        $call->assertJsonStructure([
            "data" => [
                "*" => [
                    "id",
                    "description",
                    "message"
                ]
            ]
        ]);
    }
}
