<?php

namespace Tests\Feature;

use App\Device;
use App\Http\Middleware\LimitExpiredLicenseAccess;
use App\Http\Middleware\LimitSimoultaneousAccess;
use App\Notifications\WialonWebhookNotification;
use App\NotificationTrigger;
use App\User;
use Illuminate\Support\Facades\Notification;
use Punksolid\Wialon\Resource;
use Punksolid\Wialon\Unit;
use Tests\Tenants\TestCase;

class NotificationsTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->withoutMiddleware([LimitSimoultaneousAccess::class, LimitExpiredLicenseAccess::class]);
        $this->be(factory(User::class)->create(), 'api');
    }

    /**
     * A basic test example.
     */
    public function test_usuario_puede_crear_un_notificador_alias_notification_trigger(): void
    {
        //        $wialon_object = \Punksolid\Wialon\Notification::all()->first();
        //        'name',
        //        'resource', // automatico
        //        'control_type_obj',
        //        'units', // devices relationship
        //        'active' //bool

        $device = factory(Device::class)->create();
//        $unit = Unit::all()->first();
        /** @var Unit $unit */
        $unit = $this->partialMock(Unit::class, function ($mock){
            $mock->id = 536;
            $mock->lat = 52.31839;
            $mock->lon = 9.81065;
        });
        $device->linkUnit($unit);
        $form = [
            'name' => $this->faker->name,
            'control_type' => 'panic_button',
            'devices_ids' => [
                $device->id,
            ],
            'active' => 1,
            'params' => [], // vacío pero presente cuando es panic button
        ];

        $call = $this->postJson('api/v1/notification_triggers', $form);
        $this->assertDatabaseHas('notification_triggers', [
            'name' => $form['name'],
        ], 'tenant');

        $call->assertJson([
            'data' => [
                'name' => $form['name'],
                'active' => $form['active'],
            ],
        ]);

        $call->assertJsonStructure([
            'data' => [
                'name',
                'active',
                'control_type',
            ],
        ]);
    }

    public function test_desactivar_notificacion()
    {
        $notification_type = factory(NotificationTrigger::class)->create();

        $call = $this->deleteJson("api/v1/activated_notification_triggers/$notification_type->id");

        $call->assertJsonFragment([
            'active' => false,
        ]);
        $call->assertStatus(200);
    }

    public function test_activar_notificacion()
    {
        $notification_type = factory(NotificationTrigger::class)->create();

        $call = $this->postJson('api/v1/activated_notification_triggers', [
            'notification_id' => $notification_type->id,
        ]);

        $call->assertJsonFragment([
            'active' => true,
        ]);
        $call->assertStatus(200);
    }

    public function test_enviar_notificacion_a_cuenta_por_webhook()
    {
        $this->withoutExceptionHandling();
        Notification::fake();
        $notification = factory(NotificationTrigger::class)->create([
            'active' => true,
        ]);
        $device = factory(Device::class)->create();
        $notification->addDevice($device);
        $callback = [
            'unit' => 'ITM 2412 TRM',
            'timestamp' => '2019-04-18 03:32:23',
            'location' => 'Manuel Gómez Morín 6372, Pueblo Toluquilla, Tlaquepaque, Jalisco 45610, Mexico',
            'last_location' => 'Manuel Gómez Morín 6372, Pueblo Toluquilla, Tlaquepaque, Jalisco 45610, Mexico',
            'locator_link' => 'http://sh-loc.com/rcRj',
            'smallest_geofence_inside' => 'GDL02',
            'all_geofences_inside' => 'GDL02, trm_02',
            'UNIT_GROUP' => 'Certificacion',
            'SPEED' => '0 km/h',
            'POS_TIME' => '2019-04-18 03:32:06',
            'MSG_TIME' => '2019-04-18 03:32:06',
            'DRIVER' => '%DRIVER%',
            'DRIVER_PHONE' => '%DRIVER_PHONE%',
            'TRAILER' => '%TRAILER%',
            'SENSOR' => 'IGNICIÓN: Deactivated, KM GPS: 111839787.00 km, BOTÓN DE PÁNICO: Desactivado, CORTINA: Cerrada, BATERÍA:: 12.78 V, CHAPA: Abierta, BOTÓN DE AYUDA: Desactivado',
            'ENGINE_HOURS' => '17519:53:42',
            'MILEAGE' => '720137 km',
            'LAT' => "N 20° 34.6897'",
            'LON' => "W 103° 21.7663'",
            'LATD' => '20.578162',
            'LOND' => '-103.362772',
            'GOOGLE_LINK' => 'http://maps.google.com/?q=20.578162,-103.362772',
            'CUSTOM_FIELD' => 'ALTA EN WIALON: 11/03/2019, CELULAR: +526683963652, GPS: Ruptela FM Tco4, PLACAS: JV-57-700, UNIDAD: Tractocamión',
            'UNIT_ID' => '18921279',
            'MSG_TIME_INT' => '1555547526',
            'NOTIFICATION' => 'Exceso de Velocidad',
            'X-Tenant-Id' => $this->account->uuid,
            'notification_id' => $notification->id,
        ];
        
        $call = $this->postJson('api/v1/webhook/alert', $callback);

        Notification::assertSentTo(
            [$this->account],
            WialonWebhookNotification::class
        );

        $call->assertSuccessful();
    }

    public function test_activate_maximum_alert_notification()
    {
        $this->withoutExceptionHandling();
        Notification::fake();
        $notification_trigger = factory(NotificationTrigger::class)->create([
            'active' => true,
        ]);
        $device = factory(Device::class)->create();
        $notification_trigger->addDevice($device);
        $callback = [
            'unit' => 'ITM 2412 TRM',
            'timestamp' => '2019-04-18 03:32:23',
            'location' => 'Manuel Gómez Morín 6372, Pueblo Toluquilla, Tlaquepaque, Jalisco 45610, Mexico',
            'last_location' => 'Manuel Gómez Morín 6372, Pueblo Toluquilla, Tlaquepaque, Jalisco 45610, Mexico',
            'locator_link' => 'http://sh-loc.com/rcRj',
            'smallest_geofence_inside' => 'GDL02',
            'all_geofences_inside' => 'GDL02, trm_02',
            'UNIT_GROUP' => 'Certificacion',
            'SPEED' => '0 km/h',
            'POS_TIME' => '2019-04-18 03:32:06',
            'MSG_TIME' => '2019-04-18 03:32:06',
            'DRIVER' => '%DRIVER%',
            'DRIVER_PHONE' => '%DRIVER_PHONE%',
            'TRAILER' => '%TRAILER%',
            'SENSOR' => 'IGNICIÓN: Deactivated, KM GPS: 111839787.00 km, BOTÓN DE PÁNICO: Desactivado, CORTINA: Cerrada, BATERÍA:: 12.78 V, CHAPA: Abierta, BOTÓN DE AYUDA: Desactivado',
            'ENGINE_HOURS' => '17519:53:42',
            'MILEAGE' => '720137 km',
            'LAT' => "N 20° 34.6897'",
            'LON' => "W 103° 21.7663'",
            'LATD' => '20.578162',
            'LOND' => '-103.362772',
            'GOOGLE_LINK' => 'http://maps.google.com/?q=20.578162,-103.362772',
            'CUSTOM_FIELD' => 'ALTA EN WIALON: 11/03/2019, CELULAR: +526683963652, GPS: Ruptela FM Tco4, PLACAS: JV-57-700, UNIDAD: Tractocamión',
            'UNIT_ID' => '18921279', // no mover
            'MSG_TIME_INT' => '1555547526',
            'NOTIFICATION' => 'Exceso de Velocidad',
            'X-Tenant-Id' => $this->account->uuid,
            'notification_id' => $notification_trigger->id,
        ];


        $call = $this->postJson('api/v1/webhook/alert', $callback);

        $call->assertSuccessful();
        Notification::assertSentTo(
            $this->account,
            WialonWebhookNotification::class
        );
    }

    public function test_get_my_notifications()
    {
        $call = $this->getJson('api/v1/me/notifications');

        $call->assertJsonStructure([
            'data' => [
                '*' => [
                    'id',
                    'message',
                    'link',
                ],
            ],
        ]);
    }
}
