<?php

namespace Tests\Feature;

use App\Account;
use App\Http\Middleware\LimitExpiredLicenseAccess;
use App\Http\Middleware\LimitSimoultaneousAccess;
use App\Place;
use App\User;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Punksolid\Wialon\Geofence;
use Tests\Tenants\TestCase;

class PlacesTest extends TestCase
{
    var $user;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();
        $this->actingAs($this->user, "api");
        $this->withoutMiddleware([LimitSimoultaneousAccess::class, LimitExpiredLicenseAccess::class]);

    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_usuario_debe_poder_crear_origenes_y_destino()
    {



        $place = [ //TODO tiene la misma estructura que line, preguntar si la line transportadora es igual a un lugar
            //TODO en caso afirmativo agregar line a places talvez
            "name" => $this->faker->name,
            "person_in_charge" => $this->faker->name,
            "address" => $this->faker->address,
            "phone" => $this->faker->phoneNumber,
            "geofence_ref" => $this->faker->randomNumber(15)
        ];

        $call = $this->postJson("api/v1/places", $place);
        $call->assertJson([
            "data" => $place
        ]);
        $call->assertStatus(201);
    }

    public function test_usuario_debe_poder_listar_origenes_y_destinos()
    {
        $call = $this->getJson("api/v1/places");

        $call->assertJsonStructure([
            "data" => [
                "*" => [
                    "id",
                    "name",
                    "person_in_charge",
                    "address",
                    "phone"
                ]
            ]
        ]);
        $call->assertStatus(200);
    }

    public function test_usuario_debe_poder_eliminar_lugares()
    {
        $place = factory(Place::class)->create();
        $call = $this->deleteJson("api/v1/places/$place->id");

        $call->assertSee("Se ha eliminado el registro del lugar");
        $this->assertDatabaseMissing("places", [
            "name" => $place->name
        ], 'tenant');
    }

    public function test_usuario_debe_poder_editar_lugares()
    {

        $place = factory(Place::class)->create();
        $new_place = factory(Place::class)->create();

        $call = $this->putJson("api/v1/places/$place->id", $new_place->toArray());

        $call->assertStatus(200);
        $this->assertDatabaseMissing("places",
            $place->toArray(),
            "tenant");
    }

    public function test_ver_detalles_de_lugar()
    {
        $place = factory(Place::class)->create();

        $call = $this->getJson("api/v1/places/$place->id");

        $call->assertJson([
            "data" => [
                "name" => $place->name,
                "person_in_charge" => $place->person_in_charge,
                "address" => $place->address,
                "phone" => $place->phone,

            ]
        ]);
    }

    public function test_integrity_check()
    {
        $accounts = Account::all();
//        dd($accounts->count());
        foreach ($accounts as $account) {
            dump($account->uuid. "   : ".$account->hasDatabaseAccesible());
            if (!$account->hasDatabaseAccesible()) {
                $account->delete();
            }
        }
        dump($account->count());

    }

    public function test_usuario_puede_ver_geocercas_de_wialon()
    {
        $call = $this->getJson('api/v1/wialon/geofences');

        $call->assertJsonStructure([
            'data' => [
                '*' => [
                    'id',
                    'name',
                    'description'
                ]
            ]
        ]);
    }
}
