<?php

namespace Tests\Feature;

use App\Account;
use App\License;
use App\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class LoginTest extends TestCase
{

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();
        $this->actingAs($this->user);
    }

    public function test_acting_as()
    {
        $call = $this->getJson("api/v1/me");
        $call->assertSee($this->user->email);

    }
    public function test_login_usuario()
    {
        $user = factory(User::class)->create();
        $call = $this->json("POST", "/api/v1/login",[
            "email" => $user->email,
            "password" => "secret"
        ]);
        $call->assertJsonStructure([
            "access_token"
        ])
            ->assertStatus(200);
    }

    /**
     * @expectedException Symfony\Component\HttpKernel\Exception\HttpException
     */
    public function test_cuenta_no_puede_tener_mas_de_2_sesiones_activas()
    {
        $this->withoutExceptionHandling();
        $user1 = factory(User::class)->create(["name" => "pedro"]);
        $user2 = factory(User::class)->create(["name" => "juan"]);
        $user3 = factory(User::class)->create(["name" => "luis"]);
        $account = factory(Account::class)->create();
        $account->addLicense(factory(License::class)->create([
            "number_active_sessions" => 2
        ]));
        $account->addUser($user1);
        $account->addUser($user2);
        $account->addUser($user3);


        $call1 = $this->actingAs($user1, "api")->getJson("api/v1/devices");

        $call2 = $this->actingAs($user2, "api")->getJson("api/v1/devices");

        $call3 = $this->actingAs($user3, "api")->getJson("api/v1/devices");

//        $call4 = $this->actingAs($user, "api")->getJson("api/v1/devices", ["Authorization" => "Bearer " . $token]);


//
//        $call_login2 = $this->json("POST", "/api/v1/login",[
//            "email" => $users->last()->email,
//            "password" => "secret"
//        ]);
//

    }



    public function test_access_with_header_token()
    {
        $user = factory(User::class)->create();

        $call = $this->json("POST", "/api/v1/login",[
            "email" => $user->email,
            "password" => "secret"
        ]);
        $call->assertJsonStructure([
            "access_token",
            "token_type",
            "expires_at"
        ]);
        $token = $call->getOriginalContent()["access_token"];
        $call = $this->getJson("api/v1/devices", ["Authorization" => "Bearer " . $token]);

        $call->assertStatus(200);
    }

    public function test_check_innaccesible_endpoint_for_not_logged_users()
    {
        $call = $this
            ->actingAs(factory(User::class)->create())
            ->json("GET", "api/v1/devices");


        $call->assertStatus(401);

    }

    public function test_denegar_acceso_sin_licencia_activa()
    {
        $user = factory(User::class)->create();
        $account = factory(Account::class)->create();
        $license = factory(License::class)->create();
        $account->addLicense($license);
        $user->attachAccount($account);

        $call_login1 = $this->json("POST", "/api/v1/login",[
            "email" => $user->email,
            "password" => "secret"
        ]);

        $call_login1->assertJsonStructure([
            "access_token"
        ])->assertStatus(200);
        $token = $call_login1->getOriginalContent()["access_token"];
        $call2 = $this->getJson("api/v1/devices", ["Authorization" => "Bearer " . $token]);

        $call2->dump();
//        $call_login2 = $this->json("POST", "/api/v1/login",[
//            "email" => $users->last()->email,
//            "password" => "secret"
//        ]);
//
        \Cache::flush();
    }
}
