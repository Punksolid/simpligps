<?php

namespace Tests\Feature;

use App\Account;
use App\Sysadmin;
use App\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class AccountTest extends TestCase
{

    private  $sysadmin;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->sysadmin = factory(Sysadmin::class)->create();
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_crear_nueva_cuenta()
    {
        $account_details = [
            "easyname" => $this->faker->word
        ];

        $call = $this->actingAs(factory(User::class)->create())->json("POST", "api/sysadminv1/accounts",
            $account_details
        );

        $call->assertJson([
            "data" => [
                "easyname" => $account_details["easyname"]
            ]
        ]);

        $call->assertStatus(201);

    }

    public function test_sysadmin_puede_ver_listado_de_cuentas()
    {



        $call = $this->actingAs($this->sysadmin)->call("GET", 'api/sysadminv1/accounts');

        $call
            ->assertJsonStructure([
                "data" => [
                    "*" => [
                        "id",
                        "easyname"
                    ]
                ],
                "links",
                "meta"
            ]);
    }

    public function test_eliminar_cuenta()
    {
        $sysadmin = factory(Sysadmin::class)->create();
        $account_details = [
            "easyname" => $this->faker->word
        ];
        $call = $this->actingAs($this->sysadmin)->json("POST", "api/sysadminv1/accounts",
            $account_details
        );

        $id = $call->getOriginalContent()["id"];
        $uuid = $call->getOriginalContent()["uuid"];

        $call2 = $this->actingAs($sysadmin)->json("DELETE", "api/sysadminv1/accounts/{$id}");


        $this->assertDatabaseMissing("accounts", [
            "uuid" => $uuid
        ]);

    }

    /*
     * Sysadmin debe poder agregar datos fiscales a cuentas,
     * razon social,
     * contactos,
     * domicilio,
     *  telefonos,
     * tipo de empresa
     */
    public function test_sysadmin_puede_agregar_datos_fiscales_de_cuentas()
    {
        $fiscal_data = [
            "business_name" => $this->faker->company,
            "contact" => $this->faker->name,
            "address" => $this->faker->address,
            "phone" => $this->faker->phoneNumber,
            "business_type" => $this->faker->word
        ];
        $fake_account = factory(Account::class)->create();

        $call = $this->actingAs($this->sysadmin)->json(
            "PUT",
            "api/sysadminv1/accounts/{$fake_account->id}/fiscal",
            $fiscal_data
        );

        $call->assertSuccessful();

    }

    public function test_dasboard_account_counts()
    {
        $call = $this->actingAs($this->sysadmin)->json("GET", "api/sysadminv1/dashboard/accounts");

        $call->assertStatus(200);

        $call->assertJsonStructure([
            "data"
        ]);
    }

}
