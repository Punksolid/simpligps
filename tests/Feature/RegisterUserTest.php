<?php

namespace Tests\Feature;

use App\Notifications\PasswordResetRequest;
use App\PasswordReset;
use App\User;
use Carbon\Carbon;
use Illuminate\Auth\Notifications\ResetPassword;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Notification;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Testing\Fakes\MailFake;
use Laravel\Passport\ClientRepository;
use Laravel\Passport\Passport;
use Mockery\Mock;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class RegisterUserTest extends TestCase
{
//    use DatabaseTransactions;


    protected function setUp():void
{
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->be(factory(User::class)->create(), "api");
    }



    public function test_enviar_reestablecimiento_de_contrasenha()
    {
        $this->withoutExceptionHandling();
        $user = factory(User::class)->create();
        \Notification::fake();
        Mail::fake();
        $call = $this->json("POST", "/api/v1/password/send_email", [
            "email" => $user->email
        ]);

        \Notification::assertSentTo(
            [$user], PasswordResetRequest::class
        );


    }

    public function test_cambiar_contrasenha_despues_de_recibir_email()
    {
        /**
         * El token que se tiene que enviar es un hash no el token que se encuentra en la base de datos
         * El token es enviado en el email, hace falta buscar una manera de generar un token en base de
         * un password reset
         */
        $this->withoutExceptionHandling();
        $user = factory(User::class)->create([
            'password' => bcrypt('87654321')
        ]);
        \Notification::fake();
        $call = $this->postJson("/api/v1/password/send_email", [
            "email" => $user->email
        ]);
        $token = '';
        \Notification::assertSentTo(
            $user,
            PasswordResetRequest::class,
            function ($notification, $channels) use (&$token) {
                $token = $notification->token;

                return true;
            });

        $call = $this->postJson("/api/v1/password/change/", [
            "email" => $user->email,
            "password" => "87654321",
            "password_confirmation" => "87654321",
            "token" => $token
        ]);



        $call->assertStatus(200);
    }


}
