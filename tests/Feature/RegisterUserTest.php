<?php

namespace Tests\Feature;

use App\Notifications\PasswordResetRequest;
use App\PasswordReset;
use App\User;
use Carbon\Carbon;
use Illuminate\Auth\Notifications\ResetPassword;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Testing\Fakes\MailFake;
use Laravel\Passport\ClientRepository;
use Laravel\Passport\Passport;
use Mockery\Mock;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class RegisterUserTest extends TestCase
{
//    use DatabaseTransactions;


    protected function setUp():void
{
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->be(factory(User::class)->create(), "api");
    }

    public function test_registrar_usuario()
    {
        $new_user = [
            "username" => $this->faker->userName,
            "password" => "secret",
            "name" => $this->faker->name,
            "lastname" => $this->faker->lastName,
            "email" => $this->faker->email
        ];

        $response = $this->postJson('/api/v1/users', $new_user);
        unset($new_user["password"]);
        $response
            ->assertJsonFragment($new_user)
            ->assertStatus(200);

        return $new_user;
    }

    public function test_enviar_reestablecimiento_de_contrasenha()
    {
        $user = factory(User::class)->create();
        \Notification::fake();
        Mail::fake();
        $call = $this->json("POST", "/api/v1/password/send_email", [
            "email" => $user->email
        ]);

        \Notification::assertSentTo(
            [$user], ResetPassword::class
        );


    }

    public function test_cambiar_contrasenha_despues_de_recibir_email()
    {
        $user = factory(User::class)->create([
            'password' => bcrypt('87654321')
        ]);

        $call = $this->postJson("/api/v1/password/send_email", [
            "email" => $user->email
        ]);
        $password_reset = PasswordReset::where("email", $user->email)->first();


        $call = $this->postJson("/api/v1/password/change/", [
            "email" => $user->email,
            "password" => "87654321",
            "password_confirmation" => "87654321",
            "token" => $password_reset->token
        ]);
        $call->assertJsonFragment([
            "name" => $user->name
        ]);
        $call->assertStatus(200);
    }


}
