<?php

namespace Tests\Feature;

use App\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class UsersTest extends TestCase
{
    var $user;


    protected function setUp():void
{
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();
        $this->actingAs($this->user, "api");
        $this->withoutMiddleware([LimitSimoultaneousAccess::class, LimitExpiredLicenseAccess::class]);

    }

    public function test_se_puede_editar_un_usuario()
    {
        $user = factory(User::class)->create();
        $new_data = [
            "name" => $this->faker->name,
            "lastname" => $this->faker->lastName,
            "username" => $this->faker->userName,
            "email" => $this->faker->email,
            "password" => "123qwe"
        ];

        $call = $this->putJson("api/v1/users/{$user->id}", $new_data);
        unset($new_data["password"]);
        $call->assertJsonFragment($new_data);
    }

    public function test_listar_usuarios()
    {
        $users = factory(User::class, 2)->create();
        $response = $this->getJson('/api/v1/users');

        $response
            ->assertJsonFragment([
                "email" => $users->first()->email
            ])
            ->assertJsonFragment([
                "email" => $users->last()->email
            ])
            ->assertStatus(200);

    }

    public function test_buscar_usuario_por_email()
    {
        $this->withoutExceptionHandling();
        $user_to_search = factory(User::class)->create();

        $call = $this->getJson("api/v1/users?email=$user_to_search->email");

        $call->assertJsonFragment([
            "email" => $user_to_search->email
        ]);

        $user_to_search_2 = User::first();

        $call = $this->getJson("api/v1/users?email=$user_to_search_2->email");

        $call->assertJsonFragment([
            "email" => $user_to_search_2->email
        ]);
    }

    public function test_search_username()
    {
        $this->withoutExceptionHandling();
        $user_to_search = factory(User::class)->create();
        $user_to_search->profile()->create($profile = [
            "lastname" => $this->faker->lastName,
            "username" => $this->faker->userName
        ]);
        $user_to_search->with('profile')->get();

        $call = $this->getJson("api/v1/users?username={$profile['username']}");

        $call->assertJsonFragment([
            "username" => $profile['username']
        ]);

    }

    public function test_search_user_with_two_variables()
    {
        $this->withoutExceptionHandling();
        $user_to_search = factory(User::class)->create();
        $user_to_search->profile()->create($profile = [
            "lastname" => $this->faker->lastName,
            "username" => $this->faker->userName
        ]);
        $user_to_search->with('profile')->get();

        $call = $this->getJson("api/v1/users?name={$user_to_search['name']}&lastname={$profile['lastname']}");

        $call->assertJsonFragment([
            "username" => $profile['username']
        ]);
    }
}
